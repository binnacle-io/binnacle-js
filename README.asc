## Binnacle JS

### JS Client for Binnacle.io Distributed Event Logging and Multi-channel Push Service

....
__/\\\______________________________________________________________________________/\\\\\\____________________
_\/\\\_____________________________________________________________________________\////\\\____________________
_\/\\\__________/\\\__________________________________________________________________\/\\\____________________
_\/\\\_________\///____/\\/\\\\\\_____/\\/\\\\\\_____/\\\\\\\\\_________/\\\\\\\\_____\/\\\_________/\\\\\\\\__
_\/\\\\\\\\\____/\\\__\/\\\////\\\___\/\\\////\\\___\////////\\\______/\\\//////______\/\\\_______/\\\/////\\\_
_\/\\\////\\\__\/\\\__\/\\\__\//\\\__\/\\\__\//\\\____/\\\\\\\\\\____/\\\_____________\/\\\______/\\\\\\\\\\\__
_\/\\\__\/\\\__\/\\\__\/\\\___\/\\\__\/\\\___\/\\\___/\\\/////\\\___\//\\\____________\/\\\_____\//\\///////___
_\/\\\\\\\\\___\/\\\__\/\\\___\/\\\__\/\\\___\/\\\__\//\\\\\\\\/\\___\///\\\\\\\\___/\\\\\\\\\___\//\\\\\\\\\\_
_\/////////____\///___\///____\///___\///____\///____\////////\//______\////////___\/////////_____\//////////__
....

### Status

image:https://www.codeship.io/projects/ca08a6a0-d1cb-0132-00f1-267aebe4cf02/status?branch=master[CI Status]
image:https://codeclimate.com/repos/5542c1e869568061aa001e48/badges/b18a334a14e003a0d25e/gpa.svg[
"Code Climate",link="https://codeclimate.com/repos/5542c1e869568061aa001e48/feed"]
image:https://codeclimate.com/repos/5542c1e869568061aa001e48/badges/b18a334a14e003a0d25e/coverage.svg[
"Test Coverage",link="https://codeclimate.com/repos/5542c1e869568061aa001e48/feed"]

### Getting Started

In your JavaScript:

```html
<script src="../build/dist/binnacle.js"></script>
<script>
var client = new Binnacle.Client({
  accountId|appId|channelId: xxx,
  apiKey: apiKey,
  apiSecret: apiSecret,
  endPoint: endPoint,

  onSignal: function(event) {
    // do something with the event
  }
});
client.subscribe();
</script>
```

The client can be configured to listed to:

- A specific channel (provide the `channelId` property)
- All the channels of a given app (provide the `appId` property)
- An account-level channel (provide both `accountId` and `channelId` properties)

### Event Object

The event JSON object received by the `onSignal` event handler contains the following keys:

- `accountId`: The Binnacle Account ID
- `appId`: The Binnacle App ID
- `channelId`: The Binnacle Context ID
- `sessionId`: Use to track a user session across requests/processes
- `eventName`: The name of the event
- `clientEventTime`: The time the event was created
- `clientId`: Use for system/subsystem/component or user identifier
- `logLevel`: UNKNOWN, FATAL, ERROR, WARN, INFO, DEBUG or whatever your heart desires!
- `environment`
- `tags` (optional): An Array of tags, e.g. `["accounts", "refunds", "dispute"]`
- `json` (optional): A JSON Object, e.g. `{ "message": "there you are!" }`

### Filters

The client can be configured to listen to certain signals. You can use the `filterBy` and `filterByValue`.
The `filterBy` currently supports the values `event`, `client` and `tag`.

For example to create a client that listens to events with a name of `ERROR_REPORT` the client can be
configured as follows:

```
var client = new Binnacle.Client({
  // ...
  onSignal: function(event) {
    console.log("Received error report update!" + event.eventName);
  },
  filterBy: 'event',
  filterByValue: 'ERROR_REPORT'
});

client.subscribe();
```

### Missed Messages

Upon activating a subscription a list of missed messages/events can be retrieved
by providing the `missedMessages` boolean property and the optional `since` (a number of minutes, which defaults to 20 minutes)
and the `limit` property which determines the maximum number of messages to receive (defaults to 10).

To handle the missed messages a event handler need to be provided using the `onSignals` property:

```
var client = new Binnacle.Client({
  // ...
  missedMessages: true,
  limit: 30,
  since: 30,
  onSignal: signalHandler,
  onSignals: missedMessagesHandler
});

client.subscribe();
```

### Presence Events

Binnacle can send presence events to a subscriber. Using the `identity` property
and providing event handlers for a subscriber joining or leaving (`onSubscriberJoined` and `onSubscriberLeft` respectively):

```
var client = new Binnacle.Client({
  // ...
  identity: identity
  onSubscriberJoined: subscriberEventHandler,
  onSubscriberLeft: subscriberEventHandler
});

client.subscribe();
```

### Developer Setup

- Fork and clone the repo.

#### Install NPM packages

- Run `npm install` to install all dependencies (including Grunt).
- `npm install -g bower`
- `npm install grunt-bower-task --save-dev`
- `npm install grunt-bower-concat --save-dev`

#### Build

- `grunt --help` : List available grunt tasks
- `grunt clean build` : Clean and build the project

#### Test

- html/subscription_example.html : Simple example of subscribing to a Binnacle App/Context
